////  VehicleTemplate.swift//  DrivingVehicle//import Foundationimport AVFoundationenum ControlMessage{    case HeadingtoAngle, GetVehicleStatus, Button1, Button2, Button3, Button4, Button5, Button6, Abort        func description () -> String {    switch self {    case HeadingtoAngle:        return "HeadingtoAngle"    case GetVehicleStatus:        return "GetVehicleStatus"    case Button1:        return "Button1"    case Button2:        return "Button2"    case Button3:        return "Button3"    case Button4:        return "Button4"    case Button5:        return "Button5"    case Button6:        return "Button6"    case Abort:        return "Abort"    }    }}public class VehicleTemplate: NSObject, NWObserver{    private let _vehicleStateManager = VechicleStateManager()    private let _headingStateManager = HeadingStateManager()            func driveForward(speed:NSNumber?){}    func driveBackward(speed:NSNumber?){}    func rotateLeft(radius:NSNumber?){}    func rotateRight(radius:NSNumber?){}        func driveDiagonallyForwardLeft(speed:NSNumber?,radius:NSNumber?){}    func driveDiagonallyForwardRight(speed:NSNumber?,radius:NSNumber?){}        func driveDiagonallyBackwardLeft(speed:NSNumber?,radius:NSNumber?){}    func driveDiagonallyBackwardRight(speed:NSNumber?,radius:NSNumber?){}        func stopDriving(){}        func headingUp(){}    func headingDown(){}    func stopHeading(){}        func headingtoangle(value:NSNumber){}        func getvehiclestatus(){}        func button1(){}    func button2(){}    func button3(){}    func button4(){}    func button5(){}    func button6(){}            func onMessage(dict: Dictionary<String, AnyObject>){        let type = dict["type"] as! String!        if(type != nil){            let flag = dict["flag"] as! Bool! == true            switch type{            case VehicleStatus.DrivingForward.description():                let option = MovingStateOptions(doStart: flag, direction: .Front)                if(dict["value"] != nil){                    let value = dict["value"] as! NSNumber!                    _vehicleStateManager.state().moveStateChanged(_vehicleStateManager, vehicle: self, options: option, value: value)                }            case VehicleStatus.DrivingBackward.description():                let option = MovingStateOptions(doStart: flag, direction: .Back)                if(dict["value"] != nil){                    let value = dict["value"] as! NSNumber!                    _vehicleStateManager.state().moveStateChanged(_vehicleStateManager, vehicle: self, options: option, value: value)                }            case VehicleStatus.RotatingLeft.description():                let option = RotationStateOptions(doStart: flag, direction: .Left)                if(dict["value"] != nil){                    let value = dict["value"] as! NSNumber!                    _vehicleStateManager.state().roteteStateChanged(_vehicleStateManager, vehicle: self, options: option, value: value)                }            case VehicleStatus.RotatingRight.description():                let option = RotationStateOptions(doStart: flag, direction: .Right)                if(dict["value"] != nil){                    let value = dict["value"] as! NSNumber!                    _vehicleStateManager.state().roteteStateChanged(_vehicleStateManager, vehicle: self, options: option, value: value)                }            case HeadingStatus.HeadingDown.description():                let option = HeadingStateOptions(doStart: flag, direction: .Down)                _headingStateManager.state().headingStateChanged(_headingStateManager, vehicle: self, options: option)            case HeadingStatus.HeadingUp.description():                let option = HeadingStateOptions(doStart: flag, direction: .Up)                _headingStateManager.state().headingStateChanged(_headingStateManager, vehicle: self, options: option)            case ControlMessage.HeadingtoAngle.description():                if(flag && dict["value"] != nil){                    let value = dict["value"] as! NSNumber!                    headingtoangle(value)                }            case ControlMessage.GetVehicleStatus.description():                if(flag){ getvehiclestatus() }            case ControlMessage.Button1.description():                if(flag){ button1() }            case ControlMessage.Button2.description():                if(flag){ button2() }            case ControlMessage.Button3.description():                if(flag){ button3() }            case ControlMessage.Button4.description():                if(flag){ button4() }            case ControlMessage.Button5.description():                if(flag){ button5() }            case ControlMessage.Button6.description():                if(flag){ button6() }            case ControlMessage.Abort.description():                if(flag){                    _vehicleStateManager.state().abort(_vehicleStateManager, vehicle: self)                    _headingStateManager.state().abort(_headingStateManager, vehicle: self)                }            default:                return            }        }            }}